package model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import model.dto.Cart;
import model.dto.CustomMealkit;
import model.dto.Ingredient;
import model.dto.Mealkit;

public class cartDAO {
	
	private ConnectionManager connManager;
	
	public cartDAO() {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			connManager = new ConnectionManager();
		} catch (ClassNotFoundException ex) {
			ex.printStackTrace();
		}
	}
	
	// 재료 리스트 반환
	private Boolean findIngList(List<CustomMealkit> cmList)
	{
		Connection conn = connManager.getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			String query = "SELECT i.ingname, i.price, i.calorie, c.ingquantity "
					+ "FROM ingredient i, custommealkiting c "
					+ "WHERE i.ingid = c.ingid AND custommkid = ?";
			pstmt = conn.prepareStatement(query);
			
			for (CustomMealkit cm : cmList) {
				int customMkId = cm.getCustomerId();
				List<Ingredient> ingList = cm.getOriginalMealkit().getIngredients();
				pstmt.setInt(1, customMkId);
				rs = pstmt.executeQuery();
				while (rs.next()) {
					String ingName = rs.getString("INGNAME");
					int ingPrice = rs.getInt("PRICE");
					int ingCalorie = rs.getInt("CALORIE");
					int ingQuantity = rs.getInt("INGQUANTITY");
					System.out.println(ingName + " " + ingPrice + " " + ingCalorie + " " + ingQuantity);
					ingList.add(new Ingredient(ingName, ingPrice, ingCalorie, ingQuantity));
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		} finally {
			if (rs != null) {
				try { rs.close(); } catch (SQLException ex) { ex.printStackTrace(); }
			}
			if (pstmt != null) {
				try { pstmt.close(); } catch (SQLException ex) { ex.printStackTrace(); }
			}
			if (conn != null) {
				try { conn.close(); } catch (SQLException ex) { ex.printStackTrace(); }
			}
		}
		
		return true;
	}
	
	public Cart findCartItem(int customerId) {
		Connection conn = connManager.getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Cart cartitem = new Cart();
		List<CustomMealkit> cmList = cartitem.getCustomMealkits();
		List<Ingredient> cmIng;
		
		try {
			String query = "SELECT cm.customMkId, m.mkid, m.mkname, c.totalprice, c.quantity "
					+ "FROM cartitem c, mealkit m, custommealkit cm "
					+ "WHERE c.customerId = ? AND c.customMkId = cm.customMkId AND cm.mkId = m.mkId";
			
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, customerId);
			
			rs = pstmt.executeQuery();
			
			while (rs.next())
			{
				int customMkId = rs.getInt("CUSTOMMKID");
				int mkId = rs.getInt("MKID");
				String mkName = rs.getString("MKNAME");
				int price = rs.getInt("TOTALPRICE");
				int quantity = rs.getInt("QUANTITY");
				cmList.add(new CustomMealkit(customMkId, new Mealkit(mkId, mkName), price, quantity));
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try { rs.close(); } catch (SQLException ex) { ex.printStackTrace(); }
			}
			if (pstmt != null) {
				try { pstmt.close(); } catch (SQLException ex) { ex.printStackTrace(); }
			}
			if (conn != null) {
				try { conn.close(); } catch (SQLException ex) { ex.printStackTrace(); }
			}
		}
		return cartitem;
	}
	
	public static void main(String[] args) {
		cartDAO c = new cartDAO();
		Cart result = c.findCartItem(5);
		List<CustomMealkit> cmList = result.getCustomMealkits();
		c.findIngList(cmList);
		
		for (CustomMealkit cm : cmList) {
			System.out.println(cm.getOriginalMealkit().getMkName() + " " + cm.getPrice());
		}
	}
	
	
}
